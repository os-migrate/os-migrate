name: consistency-functional
on:
  push:
    paths-ignore:
      - 'doc/**'
  pull_request:
    paths-ignore:
      - 'doc/**'
jobs:
  # TODO: Add a previous job that:
  # * Builds the container image
  # * Store the container image to be reused in all jobs
  # * Import the container image on each job
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo locale-gen en_US.UTF-8
          sudo dpkg-reconfigure locales
          sudo python -m pip install --upgrade pip
          sudo pip install tox
          sudo apt install software-properties-common -y
          sudo add-apt-repository -y ppa:projectatomic/ppa
          sudo apt update -y
          sudo apt install build-essential findutils -y
          sudo apt install podman -y
      - name: Print podman version
        run: |
          podman -v
      - name: Configure podman to use cgroupfs as cgroup manager
        run: |
          mkdir -p ~/.config/containers
          echo 'cgroup_manager = "cgroupfs"' > ~/.config/containers/libpod.conf
      - name: Make the container image to launch the tests
        run: |
          NO_VAGRANT=1 make toolbox-build
      - name: Run all the tests non OpenStack dependant
        run: |
          ./toolbox/run make test-fast

  functional:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]
    services:
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo locale-gen en_US.UTF-8
          sudo dpkg-reconfigure locales
          # We use ppa:projectatomic repo to install podman
          sudo add-apt-repository -y ppa:projectatomic/ppa
          sudo apt install podman -y
          sudo apt remove mysql-server mysql-server -y
          # MySQL requirements
          sudo apt install python3-mysqldb libmysqlclient-dev mysql-client -y
          # Httplib2 requirements
          # We need to install this library un purpose, if not the devstack
          # installer will crash as pip is not able to determine if its
          # installed or not
          sudo apt install python3-httplib2 -y
          # We need to be sure we use the latest versions of
          # pip, virtualenv and setuptools
          sudo python -m pip install --upgrade pip
          sudo python -m pip install --upgrade virtualenv
          sudo python -m pip install --upgrade setuptools
      # there is a script inside devstack that checks to ensure rabbit is
      # enabled.  because we're using rabbit in a container and devstack cannot
      # manage it, we mock a service so it won't fail.
      - name: Create a dummy rabbit service to trick devstack/lib/rpc_backend
        run: |
          sudo tee /usr/mock.sh > /dev/null <<'EOF'
          sleep 3600;
          EOF
          sudo chmod u+x /usr/mock.sh
          sudo tee /lib/systemd/system/rabbit.service > /dev/null <<'EOF'
          [Unit]
          Description=rabbit mock service
          [Service]
          Type=simple
          ExecStart=/bin/bash /usr/mock.sh
          [Install]
          WantedBy=multi-user.target
          EOF
          sudo systemctl enable rabbit.service
          sudo systemctl start rabbit.service
          sudo systemctl restart rabbit.service
          sudo systemctl status rabbit.service
      - name: Configure podman to use cgroupfs as cgroup manager
        run: |
          mkdir -p ~/.config/containers
          echo 'cgroup_manager = "cgroupfs"' > ~/.config/containers/libpod.conf
      - name: Make the container image to launch the tests
        run: |
          NO_VAGRANT=1 make toolbox-build
      # We're hitting filesystem ownership issue on some GH Actions workers:
      # https://ubuntuforums.org/showthread.php?t=2406453
      - name: Make sure filesystem ownership is correct
        run: |
          set -x
          sudo chown root:root /
          sudo chown root:root /bin
      - name: Clone devstack
        run: |
          git clone https://opendev.org/openstack/devstack
      - name: Configure devstack
        run: |
          DIR=$(pwd)
          cd devstack
          cat << 'EOF' > local.conf
          [[local|localrc]]
          RECLONE=True
          USE_PYTHON3=True
          ADMIN_PASSWORD=devstack
          SERVICE_PASSWORD=$ADMIN_PASSWORD
          DATABASE_PASSWORD=$ADMIN_PASSWORD
          HOST_IP=127.0.0.1
          SERVICE_HOST=127.0.0.1
          RABBIT_HOST=127.0.0.1
          RABBIT_USERID=guest
          RABBIT_PASSWORD=guest

          # Pre-requisite
          ENABLED_SERVICES=mysql,key

          # Neutron
          ENABLED_SERVICES+=,q-svc,q-dhcp,q-meta,q-l3,q-agt

          # Nova
          ENABLED_SERVICES+=,n-cpu,n-api,n-cond,n-sch,n-api-meta

          # Others
          ENABLED_SERVICES+=,placement,placement-client,g-api,c-sch,c-api,c-vol

          [[post-config|/etc/nova/nova.conf]]
          [filter_scheduler]
          enabled_filters = AvailabilityZoneFilter,ComputeFilter,
          ComputeCapabilitiesFilter,ImagePropertiesFilter,
          ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,
          SameHostFilter,DifferentHostFilter,PciPassthroughFilter,
          NUMATopologyFilter

          [[post-config|$NOVA_CPU_CONF]]
          [compute]
          live_migration_wait_for_vif_plug=True
          [libvirt]
          live_migration_uri = qemu+ssh://root@%s/system
          cpu_mode = host-passthrough
          virt_type = qemu
          EOF
          cat local.conf
          sudo ./tools/create-stack-user.sh
          sudo mv $DIR/devstack /opt/stack/devstack
          sudo chown -R stack: /opt/stack/devstack
      - name: Start devstack
        run: |
          sudo -iu stack bash -c 'cd /opt/stack/devstack; ./stack.sh'
      - name: Get debug data
        if: failure()
        run: |
            echo ">>> Journal logs"
            sudo journalctl --no-pager
      - name: See "systemctl status rabbitmq-server.service" for details.
        if: failure()
        run: |
            sudo systemctl status rabbitmq-server.service
      - name: See "journalctl -xe" for details.
        if: failure()
        run: |
          sudo journalctl -xe
      - name: Run sanity checks
        run: |
          echo "- Get network and routers list"
          openstack --os-cloud devstack-admin --os-region RegionOne network list
          openstack --os-cloud devstack-admin --os-region RegionOne router list
      - name: Check keystone
        run: |
          echo "- Get endpoints"
          openstack --os-cloud devstack-admin --os-region RegionOne endpoint list
      - name: Connect functional tests to devstack
        run: |
          cp /etc/openstack/clouds.yaml tests/clouds.yaml && \
          ./toolbox/run ./scripts/auth-from-clouds.sh \
              --config tests/clouds.yaml \
              --src devstack \
              --dst devstack-alt \
              > tests/auth.yml && \
          rm tests/clouds.yaml
      - name: Run functional tests
        run: |
          ./toolbox/run make test-func
