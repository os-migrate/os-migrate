@startuml

participant Migrator as p_mig
participant "Destination\nCloud" as p_dst_cloud
participant "Destination\nConv. Host" as p_dst_host
participant "Source\nCloud" as p_src_cloud
participant "Source\nConv. Host" as p_src_host

activate p_mig
p_mig -> p_mig: Validate
p_mig -> p_mig: Filter
p_mig --> p_dst_host: Connectivity check
p_mig --> p_src_host: Connectivity check

hnote over p_mig
  For each workload:
endhnote

p_mig -> p_mig: Initialize logs
p_mig --> p_dst_cloud: Check prerequisites
p_mig --> p_dst_cloud ++: Stop source VM (optional)
return
p_mig --> p_src_cloud: Check source VM state
p_mig -> p_src_cloud ++: Create snapshot (as applicable)
return
p_mig -> p_src_cloud ++: Attach volumes to source conv. host
return
p_mig -> p_src_host ++: Export volumes as localhost NBDs (network block devices)
return
p_mig -> p_dst_cloud ++: Create empty volumes
return
p_mig -> p_dst_cloud ++: Attach volumes to destination conv. host
return
p_mig -> p_dst_host ++: Copy volume data
p_dst_host --> p_src_host: SSH-forward NBD ports
p_dst_host --> p_src_host: Sparsify data
p_dst_host --> p_src_host: Copy data (NBD => volume)
p_dst_host --> p_src_host: Stop SSH port forwarding
return

p_mig -> p_dst_cloud ++: Create destination VM (w/ volumes as applicable)
return

p_mig -> p_src_host ++: Stop NBD exports
return
p_mig -> p_src_cloud ++: Delete temporary snapshots (as applicable)
return
p_mig -> p_src_cloud ++: Re-attach volumes to source VM (as applicable)
return

hnote over p_mig
  (end for each)
endhnote
' Hidden message to make the above hnote appear before deactivation of p_mig
p_mig -[hidden]-> p_dst_cloud

deactivate p_mig

@enduml
