- name: validate loaded resources
  os_migrate.os_migrate.validate_resource_files:
    paths:
      - "{{ os_migrate_data_dir }}/workloads.yml"
  register: workloads_file_validation
  when: import_workloads_validate_file

- name: stop when errors found
  ansible.builtin.fail:
    msg: "{{ workloads_file_validation.errors|join(' ') }}"
  when: not ( workloads_file_validation.ok | bool )

- name: read workloads resource file
  os_migrate.os_migrate.read_resources:
    path: "{{ os_migrate_data_dir }}/workloads.yml"
  register: read_workloads

- name: filter workloads to import
  ansible.builtin.set_fact:
    filtered_workloads: "{{ (
      read_workloads.resources
        | os_migrate.os_migrate.stringfilter(os_migrate_workloads_filter,
                                             attribute='params.name') ) }}"

- name: create directory for workload migration logs
  ansible.builtin.file:
    path: "{{ os_migrate_data_dir }}/workload_logs"
    state: directory

- name: get var data
  ansible.builtin.debug:
    var: hostvars['os_migrate_conv_dst']

- name: get source conversion host address
  os_migrate.os_migrate.os_conversion_host_info:
    auth: "{{ os_migrate_src_auth }}"
    auth_type: "{{ os_migrate_src_auth_type|default(omit) }}"
    region_name: "{{ os_migrate_src_region_name|default(omit) }}"
    server: "{{ hostvars['os_migrate_conv_src'].os_migrate_conversion_host_name }}"
    filters: "{{ os_migrate_src_filters }}"
    validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
    ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
    client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
    client_key: "{{ os_migrate_src_client_key|default(omit) }}"
  register: os_src_conversion_host_info

- name: fail if source conversion host is not active
  ansible.builtin.fail:
    msg: The source conversion host is not running!
  when: os_src_conversion_host_info.openstack_conversion_host.status != "ACTIVE"

- name: get destination conversion host address
  os_migrate.os_migrate.os_conversion_host_info:
    auth: "{{ os_migrate_dst_auth }}"
    auth_type: "{{ os_migrate_dst_auth_type|default(omit) }}"
    region_name: "{{ os_migrate_dst_region_name|default(omit) }}"
    server: "{{ hostvars['os_migrate_conv_dst'].os_migrate_conversion_host_name }}"
    filters: "{{ os_migrate_dst_filters }}"
    validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
    ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
    client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
    client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
  register: os_dst_conversion_host_info

- name: fail if destination conversion is not active
  ansible.builtin.fail:
    msg: The destination conversion host is not running!
  when: os_dst_conversion_host_info.openstack_conversion_host.status != "ACTIVE"

# Depending on the virtualization hypervisor,
# the conversion host machines can take too
# much time to start.

- name: Wait until the dst conversion host is reachable
  ansible.builtin.wait_for:
    port: 22
    host: '{{ os_dst_conversion_host_info.openstack_conversion_host.address }}'
    search_regex: OpenSSH
    sleep: 5
    timeout: 600

- name: Wait until the src conversion host is reachable
  ansible.builtin.wait_for:
    port: 22
    host: '{{ os_src_conversion_host_info.openstack_conversion_host.address }}'
    search_regex: OpenSSH
    sleep: 5
    timeout: 600

- name: import workloads
  ansible.builtin.include_tasks: workload.yml
  loop: "{{ filtered_workloads }}"
