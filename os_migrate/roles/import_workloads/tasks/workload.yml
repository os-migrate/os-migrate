- name: import a workload
  block:
    - name: preliminary setup for workload import
      os_migrate.os_migrate.import_workload_prelim:
        cloud: dst
        validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
        dst_filters: "{{ os_migrate_dst_filters }}"
        src_conversion_host:
          "{{ os_src_conversion_host_info.openstack_conversion_host }}"
        log_dir: "{{ os_migrate_data_dir }}/workload_logs"
        data: "{{ item }}"
      register: prelim
      when: item["_migration_params"]["data_copy"]|default(true)

    - name: show progress data
      ansible.builtin.debug:
        msg:
          - "{{ prelim.server_name }} log file: {{ prelim.log_file }}"
          - "{{ prelim.server_name }} progress file: {{ prelim.state_file }}"
      when:
        - prelim is defined and prelim.changed
        - item["_migration_params"]["data_copy"]|default(true)

    - name: perform required checks to ensure destination cloud is ready
      os_migrate.os_migrate.import_workload_dst_check:
        cloud: dst
        validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
        data: "{{ item }}"
        dst_filters: "{{ os_migrate_dst_filters }}"
      when:
        - prelim is defined and prelim.changed

    # Stop VM if not stopped and if config set to true
    - name: perform workload stop if os_migrate_workload_stop_before_migration is true
      openstack.cloud.server_action:
        cloud: src
        server: "{{ item['_info']['id'] }}"
        action: stop
        wait: true
        timeout: "{{ os_migrate_timeout }}"
        validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_src_client_key|default(omit) }}"
      when:
        - prelim is defined and prelim.changed
        - os_migrate_workload_stop_before_migration
        - item["_migration_params"]["data_copy"]|default(true)

    - name: perform required checks to ensure source workload is ready
      os_migrate.os_migrate.import_workload_src_check:
        cloud: src
        validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_src_client_key|default(omit) }}"
        name: "{{ item['_info']['id'] }}"
      when:
        - prelim is defined and prelim.changed
        - item["_migration_params"]["data_copy"]|default(true)

    - name: Open cloud.yaml and set cloud variables as ansible vars
      ansible.builtin.include_vars:
        file: "{{ os_migrate_clouds_path|default(os_migrate_data_dir ~ '/clouds.yaml') }}"
        name: cloud_vars
      when:
        - prelim is defined and prelim.changed

    - name: Set block_storage_api_version for source cloud is defined
      ansible.builtin.set_fact:
        cloud_vars_src: "{{ cloud_vars.clouds['src'] | combine({'block_storage_api_version' : '2'}) }}"
      when:
        - prelim is defined and prelim.changed
        - os_migrate_src_block_storage_api_version is defined
        - item["_migration_params"]["data_copy"]|default(true)

    - name: expose source volumes
      os_migrate.os_migrate.import_workload_export_volumes:
        cloud: "{{ cloud_vars_src }}"
        boot_volume_prefix: "{{ os_migrate_workload_boot_volume_prefix }}"
        conversion_host:
          "{{ os_src_conversion_host_info.openstack_conversion_host }}"
        data: "{{ item }}"
        log_file: "{{ prelim.log_file }}"
        state_file: "{{ prelim.state_file }}"
        ssh_key_path: "{{ os_migrate_conversion_keypair_private_path }}"
        ssh_user: "{{ os_migrate_conversion_host_ssh_user }}"
        timeout: "{{ os_migrate_timeout }}"
      register: exports
      when:
        - prelim is defined and prelim.changed
        - item["_migration_params"]["data_copy"]|default(true)

    - name: transfer volumes to destination
      os_migrate.os_migrate.import_workload_transfer_volumes:
        cloud: dst
        validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
        data: "{{ item }}"
        conversion_host:
          "{{ os_dst_conversion_host_info.openstack_conversion_host }}"
        ssh_key_path: "{{ os_migrate_conversion_keypair_private_path }}"
        ssh_user: "{{ os_migrate_conversion_host_ssh_user }}"
        transfer_uuid: "{{ exports.transfer_uuid }}"
        src_conversion_host_address:
          "{{ os_src_conversion_host_info.openstack_conversion_host.address }}"
        volume_map: "{{ exports.volume_map }}"
        log_file: "{{ prelim.log_file }}"
        state_file: "{{ prelim.state_file }}"
        timeout: "{{ os_migrate_timeout }}"
      register: transfer
      when:
        - prelim is defined and prelim.changed
        - item["_migration_params"]["data_copy"]|default(true)

    - name: create destination instance
      os_migrate.os_migrate.import_workload_create_instance:
        cloud: dst
        validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
        data: "{{ item }}"
        block_device_mapping: "{{ transfer.block_device_mapping|default([]) }}"
      register: os_migrate_destination_instance
      when:
        - prelim is defined and prelim.changed

    - name: clean up in the source cloud after migration
      os_migrate.os_migrate.import_workload_src_cleanup:
        cloud: src
        validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_src_client_key|default(omit) }}"
        data: "{{ item }}"
        conversion_host: "{{ os_src_conversion_host_info.openstack_conversion_host }}"
        ssh_key_path: "{{ os_migrate_conversion_keypair_private_path }}"
        ssh_user: "{{ os_migrate_conversion_host_ssh_user }}"
        transfer_uuid: "{{ exports.transfer_uuid }}"
        volume_map: "{{ exports.volume_map }}"
        log_file: "{{ prelim.log_file }}"
        state_file: "{{ prelim.state_file }}"
        timeout: "{{ os_migrate_timeout }}"
      when:
        - prelim is defined and prelim.changed
        - item["_migration_params"]["data_copy"]|default(true)

  rescue:
    - name: clean up in the source cloud after migration failure
      os_migrate.os_migrate.import_workload_src_cleanup:
        cloud: src
        validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_src_client_key|default(omit) }}"
        data: "{{ item }}"
        conversion_host: "{{ os_src_conversion_host_info.openstack_conversion_host }}"
        ssh_key_path: "{{ os_migrate_conversion_keypair_private_path }}"
        ssh_user: "{{ os_migrate_conversion_host_ssh_user }}"
        transfer_uuid: "{{ exports.transfer_uuid }}"
        volume_map: "{{ exports.volume_map }}"
        log_file: "{{ prelim.log_file }}"
        state_file: "{{ prelim.state_file }}"
        timeout: "{{ os_migrate_timeout }}"
      when:
        - prelim is defined and prelim.changed
        - os_migrate_workload_cleanup_on_failure
        - exports is defined and 'volume_map' in exports
        - item["_migration_params"]["data_copy"]|default(true)

    - name: clean up in the destination cloud after migration failure
      os_migrate.os_migrate.import_workload_dst_failure_cleanup:
        cloud: dst
        validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
        data: "{{ item }}"
        conversion_host: "{{ os_dst_conversion_host_info.openstack_conversion_host }}"
        ssh_key_path: "{{ os_migrate_conversion_keypair_private_path }}"
        ssh_user: "{{ os_migrate_conversion_host_ssh_user }}"
        transfer_uuid: "{{ exports.transfer_uuid }}"
        volume_map: "{{ transfer.volume_map }}"
        log_file: "{{ prelim.log_file }}"
        state_file: "{{ prelim.state_file }}"
        timeout: "{{ os_migrate_timeout }}"
      when:
        - prelim is defined and prelim.changed
        - os_migrate_workload_cleanup_on_failure
        - exports is defined and 'volume_map' in exports
        #- transfer is defined and 'volume_map' in transfer
        - item["_migration_params"]["data_copy"]|default(true)

    - name: fail if there was a problem in the migration
      ansible.builtin.fail:
        msg: "Failed to import {{ item.params.name }}."
