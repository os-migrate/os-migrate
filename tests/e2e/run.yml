# FIXME: Find a way we can test the whole playbook rather than just
# the role. Either make sure we're not in a play here and use
# import_playbook, or spawn an ansible-playbook subprocess? The latter
# might be actually a more precise way to test the real end-user
# experience.

# Network tasks
- name: Network tasks
  block:
    - include_role:
        name: os_migrate.os_migrate.export_networks
      vars:
        # This expression should export all osm_ workloads
        # skipping the universal conversion host (osm_uch)
        # which is used to move the VM's.
        # We create it on in seed.yml but we dont export it.
        export_networks_name_filter:
          - regex: '^osm_(?!uch)'

    - name: load exported data
      set_fact:
        resources: "{{ (lookup('file',
                               os_migrate_data_dir +
                               '/networks.yml') | from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      assert:
        that:
          - (resources |
            json_query("[?params.name ==
            'osm_net'].params.name")
            == ['osm_net'])

    - include_role:
        name: os_migrate.os_migrate.import_networks
  tags: always

# Subnet tasks
- name: Subnet tasks
  block:
    - include_role:
        name: os_migrate.os_migrate.export_subnets
      vars:
        # This expression should export all osm_ workloads
        # skipping the universal conversion host (osm_uch)
        # which is used to move the VM's.
        # We create it on in seed.yml but we dont export it.
        export_subnets_name_filter:
          - regex: '^osm_(?!uch)'

    - name: load exported data
      set_fact:
        subnet_resources: "{{ (lookup('file',
                                      os_migrate_data_dir +
                                      '/subnets.yml') | from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      assert:
        that:
          - (subnet_resources |
            json_query("[?params.name ==
            'osm_subnet'].params.cidr")
            == ['192.168.20.0/24'])

    - include_role:
        name: os_migrate.os_migrate.import_subnets
  tags: always

# Security group tasks
- name: Security group tasks
  block:
    - include_role:
        name: os_migrate.os_migrate.export_security_groups
      vars:
        export_security_groups_name_filter:
          - regex: '^osm_'

    - name: load exported data
      set_fact:
        security_group_resources: "{{ (lookup('file',
                                              os_migrate_data_dir +
                                              '/security_groups.yml') |
                                              from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      assert:
        that:
          - (security_group_resources |
            json_query("[?params.name ==
            'osm_security_group'].params.description")
            == ['OSM security group'])

    - include_role:
        name: os_migrate.os_migrate.import_security_groups
  tags: always

# Security group rules tasks
- name: Security group rules tasks
  block:
    - include_role:
        name: os_migrate.os_migrate.export_security_group_rules
      vars:
        export_security_groups_name_filter:
          - regex: '^osm_'

    - name: load exported data
      set_fact:
        security_group_rule_resources: "{{ (lookup('file',
                                               os_migrate_data_dir +
                                               '/security_group_rules.yml') |
                                               from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      assert:
        that:
          - (security_group_rule_resources |
            json_query("[?params.security_group_ref.name ==
            'osm_security_group'].params.remote_ip_prefix")
            == ['0.0.0.0/0'])

    - include_role:
        name: os_migrate.os_migrate.import_security_group_rules
  tags: always

# Router tasks
- name: Router tasks
  block:
    - include_role:
        name: os_migrate.os_migrate.export_routers
      vars:
        # This expression should export all osm_ workloads
        # skipping the universal conversion host (osm_uch)
        # which is used to move the VM's.
        # We create it on in seed.yml but we dont export it.
        export_routers_name_filter:
          - regex: '^osm_(?!uch)'

    - name: load exported data
      set_fact:
        router_resources: "{{ (lookup('file',
                                      os_migrate_data_dir +
                                      '/routers.yml') | from_yaml)
                              ['resources'] }}"

    - name: verify data contents
      assert:
        that:
          - "(router_resources |
              json_query(\"[?params.name ==
              'osm_router'].params.external_gateway_refinfo.network_ref.name\")) ==
              [os_migrate_src_osm_router_external_network | default('public')]"

    # There is no availability_zone_hints in 16
    - name: remove availability_zone_hints
      lineinfile:
        dest: "{{ os_migrate_data_dir }}/routers.yml"
        regexp: 'availability_zone_hints'
        state: absent
      when: os_migrate_dst_release == 16

    - include_role:
        name: os_migrate.os_migrate.import_routers
  tags: always

# Workloads tasks
- name: Workloads tasks
  block:
    - include_role:
        name: os_migrate.os_migrate.export_workloads
      vars:
        # This expression should export all osm_ workloads
        # skipping the universal conversion host (osm_uch)
        # which is used to move the VM's.
        # We create it on in seed.yml but we dont export it.
        export_workloads_name_filter:
          - regex: '^osm_(?!uch)'

    - name: load exported data
      set_fact:
        resources: "{{ (lookup('file',
                               os_migrate_data_dir +
                               '/workloads.yml') | from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      assert:
        that:
          - (resources |
            json_query("[?params.name ==
            'osm_server'].params.name")
            == ['osm_server'])

    - include_role:
        name: os_migrate.os_migrate.import_workloads

  rescue:
    - name: 1 hour to debug the environment
      wait_for:
        timeout: 3600

    - name: mark the task as failed
      fail:
        msg: "Failed to run the workload migration"

  tags: always
