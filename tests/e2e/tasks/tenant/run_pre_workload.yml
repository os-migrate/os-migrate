# FIXME: Find a way we can test the whole playbook rather than just
# the role. Either make sure we're not in a play here and use
# import_playbook, or spawn an ansible-playbook subprocess? The latter
# might be actually a more precise way to test the real end-user
# experience.

- name: Network tasks
  block:
    - name: export networks
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_networks
      vars:
        # This expression should export all osm_ workloads
        # skipping the universal conversion host (osm_uch)
        # which is used to move the VM's.
        # We create it on in seed.yml but we dont export it.
        export_networks_filter:
          - regex: '^osm_(?!uch)'

    - name: load exported data
      ansible.builtin.set_fact:
        resources: "{{ (lookup('file',
                               os_migrate_data_dir +
                               '/networks.yml') | from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (resources |
            json_query("[?params.name ==
            'osm_net'].params.name")
            == ['osm_net'])

    - name: import networks
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_networks

- name: Subnet tasks
  block:
    - name: export subnets
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_subnets
      vars:
        # This expression should export all osm_ workloads
        # skipping the universal conversion host (osm_uch)
        # which is used to move the VM's.
        # We create it on in seed.yml but we dont export it.
        export_subnets_filter:
          - regex: '^osm_(?!uch)'

    - name: load exported data
      ansible.builtin.set_fact:
        subnet_resources: "{{ (lookup('file',
                                      os_migrate_data_dir +
                                      '/subnets.yml') | from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (subnet_resources |
            json_query("[?params.name ==
            'osm_subnet'].params.cidr")
            == ['192.168.20.0/24'])

    - name: import subnets
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_subnets

- name: Security group tasks
  block:
    - name: export security groups
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_security_groups
      vars:
        export_security_groups_filter:
          - regex: '^osm_'

    - name: load exported data
      ansible.builtin.set_fact:
        security_group_resources: "{{ (lookup('file',
                                              os_migrate_data_dir +
                                              '/security_groups.yml') |
                                              from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (security_group_resources |
            json_query("[?params.name ==
            'osm_security_group'].params.description")
            == ['OSM security group'])

    - name: import security groups
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_security_groups

- name: Security group rules tasks
  block:
    - name: export security group rules
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_security_group_rules
      vars:
        export_security_group_rules_filter:
          - regex: '^osm_'

    - name: load exported data
      ansible.builtin.set_fact:
        security_group_rule_resources: "{{ (lookup('file',
                                               os_migrate_data_dir +
                                               '/security_group_rules.yml') |
                                               from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (security_group_rule_resources |
            json_query("[?params.security_group_ref.name ==
            'osm_security_group'].params.remote_ip_prefix")
            == ['0.0.0.0/0'])

    - name: import security group rules
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_security_group_rules

- name: Router tasks
  block:
    - name: export routers
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_routers
      vars:
        # This expression should export all osm_ workloads
        # skipping the universal conversion host (osm_uch)
        # which is used to move the VM's.
        # We create it on in seed.yml but we dont export it.
        export_routers_filter:
          - regex: '^osm_(?!uch)'

    - name: load exported data
      ansible.builtin.set_fact:
        router_resources: "{{ (lookup('file',
                                      os_migrate_data_dir +
                                      '/routers.yml') | from_yaml)
                              ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - "(router_resources |
              json_query(\"[?params.name ==
              'osm_router'].params.external_gateway_refinfo.network_ref.name\")) ==
              [os_migrate_src_osm_router_external_network | default('public')]"

    - name: import routers
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_routers

- name: Router interface tasks
  block:
    - name: import router interfaces
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_router_interfaces
      vars:
        # This expression should export all osm_ workloads
        # skipping the universal conversion host (osm_uch)
        # which is used to move the VM's.
        # We create it on in seed.yml but we dont export it.
        export_router_interfaces_filter:
          - regex: '^osm_(?!uch)'

    - name: load exported data
      ansible.builtin.set_fact:
        router_interface_resources: "{{ (lookup('file',
                                         os_migrate_data_dir +
                                         '/router_interfaces.yml') | from_yaml)
                                         ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - "(router_interface_resources |
              json_query(\"[?params.device_ref.name ==
              'osm_router'].params.fixed_ips_refs[].subnet_ref.name\")) | sort ==
              ['osm_subnet']"

    - name: import router interfaces
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_router_interfaces

- name: Image tasks
  block:
    - name: export images
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_images
      vars:
        export_images_filter:
          - regex: '^osm_'

    - name: load exported data
      ansible.builtin.set_fact:
        resources: "{{ (lookup('file',
                               os_migrate_data_dir +
                               '/images.yml') | from_yaml)
                       ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (resources |
            json_query("[?params.name ==
            'osm_image'].params.min_ram")
            == [128])

    - name: import images
      ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_images
